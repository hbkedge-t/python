# 課程：函數function  part1

# 目標

- 函數的作用
- 函數的使用步驟
- 函數的參數作用
- 函數的返回值作用
- 函數的說明文件
- 函數嵌套

# 一. 函數的作用

需求：到ATM機取款：

1. 輸入密碼後顯示"選擇功能"界面
2. 查詢餘額後顯示"選擇功能"界面
3. 取2000後顯示"選擇功能"界面

> 特點：顯示“選擇功能”界面需要重複輸出給用戶，怎麼實現？



函數就是將==一段具有獨立功能的代碼塊== 整合到一個整體並命名，在需要的位置==調用這個名稱==即可完成對應的需求。

> 函數在開發過程中，可以更高效的實現==代碼重用==。



# 二. 函數的使用步驟

## 2.1 定義函數

``` python
def 函數名(參數):
    代碼1
    代碼2
    ......
```



## 2.2 調用函數

``` python
函數名(參數)
```

> 注意：

 1. 不同的需求，參數可有可無。
 2. 在Python中，函數必須==先定義後使用==。



## 2.3 快速體驗

需求：ATM取款功能。

1. 搭建整體框架(需求)

```python
print('密碼正確登錄成功')

# 顯示"選擇功能"界面

print('查詢餘額完畢')

# 顯示"選擇功能"界面

print('取了2000元')

# 顯示"選擇功能"界面
```

2. 確定“選擇功能”界面內容

```python
print('查詢餘額')
print('存款')
print('取款')
```

3. 封裝"選擇功能"

> 注意：一定是先定義函數，後調用函數。

```python
# 封裝ATM機功能選項 -- 定義函數
def select_func():
    print('-----請選擇功能-----')
    print('查詢餘額')
    print('存款')
    print('取款')
    print('-----請選擇功能-----')
```

4. 調用函數

在需要顯示“選擇功能”函數的位置調用函數。

```python
print('密碼正確登錄成功')
# 顯示"選擇功能"界面 -- 調用函數
select_func()

print('查詢餘額完畢')
# 顯示"選擇功能"界面 -- 調用函數
select_func()

print('取了2000元')
# 顯示"選擇功能"界面 -- 調用函數
select_func()
```



# 三.函數的參數作用

思考：完成需求如下：一個函數完成兩個數1和2的加法運算，如何寫程序？

``` python
# 定義函數
def add_num():
    result = 1 + 2
    print(result)


# 調用函數
add_num()
```

思考：上述add_num函數只能完成數字1和2的加法運算，如果想要這個函數變得更靈活，可以計算任何用戶指定的兩個數字的和，如何書寫程序？

分析：用戶要在調用函數的時候指定具體數字，那麼在定義函數的時候就需要接收用戶指定的數字。函數調用時候指定的數字和定義函數時候接收的數字即是函數的參數。

``` python
# 定義函數時同時定義了接收用戶數據的參數a和b，a和b是形參(形式參數)
def add_num2(a, b):
    result = a + b
    print(result)


# 調用函數時傳入了真實的數據10 和 20，真實數據為實參(實際參數)
add_num2(10, 20)
```



# 四.函數的返回值作用

例如：我們去超商，比如買酒，給錢之後，是不是售貨員會返回給我們酒這個商品，在函數中，如果需要返回結果給用戶需要使用函數返回值。

``` python
def buy():
    return '酒'

# 使用變量保存函數返回值
goods = buy()
print(goods)
```

## 4.1 應用

需求：製作一個計算器，計算任意兩數字之和，並保存結果。

``` python
def sum_num(a, b):
    return a + b


# 用result變量保存函數返回值
result = sum_num(1, 2)
print(result)
```



# 五.函數的說明文件

思考：定義一個函數後，如何書寫程序能夠快速提示這個函數的作用？

答：註釋

思考：如果代碼多，我們是不是需要在很多代碼中找到這個函數定義的位置才能看到註釋？如果想更方便的查看函數的作用怎麼辦？

答：函數的說明文件



## 5.1 語法

- 定義函數的說明文件

``` python
def 函數名(參數):
    """ 說明文件的位置 """
    代碼
    ......
```

- 查看函數的說明文件

``` python
help(函數名)
```

## 5.2 快速體驗

``` python
def sum_num(a, b):
    """ 求和函數 """
    return a + b


help(sum_num)
```




# 六.函數嵌套調用

所謂函數嵌套調用指的是==一個函數里面又調用了另外一個函數==。

- 示例

``` python
def testB():
    print('---- testB start----')
    print('這裡是testB函數執行的代碼...(省略)...')
    print('---- testB end----')

def testA():
    print('---- testA start----')
    testB()
    print('---- testA end----')

testA()
```


- 執行流程

> - 如果函數A中，調用了另外一個函數B，那麼先把函數B中的任務都執行完畢之後才會回到上次 函數A執行的位置。

# 七. 函數應用

## 7.1 打印圖形

1. 打印一條橫線

``` python
def print_line():
    print('-' * 10)


print_line()
```


2. 打印多條橫線

``` python
def print_line():
    print('-' * 10)


def print_lines(num):
    i = 0
    while i < num:
        print_line()
        i += 1


print_lines(5)
```



## 7.2 函數計算

1. 求三個數之和

``` python
def sum_num(a, b, c):
    return a + b + c


result = sum_num(10, 20, 30)
print(result) # 60
```



2. 求三個數平均值

``` python
def average_num(a, b, c):
    sumResult = sum_num(a, b, c)
    return sumResult / 3

result = average_num(10, 20, 30)
print(result) # 20
```

# 八. 總結

- 函數的作用：封裝代碼，高效的代碼重用

- 函數使用步驟

  - 定義函數

  ``` python
  def 函數名():
      代碼1
      代碼2
      ...
  ```

  - 調用函數

  ``` python
  函數名()
  ```

- 函數的參數：函數調用的時候可以傳入真實數據，增大函數的使用的靈活性

  - 形參：函數定義時寫的參數(非真實數據)****
  - 實參：函數調用時寫的參數(真實數據)******

- 函數的返回值

  - 作用：函數調用後，返回需要的計算結果
  - 寫法

  ``` python
  return 表達式
  ```

- 函數的說明文件

  - 作用：保存函數解釋說明的信息
  - 寫法

  ``` python
  def 函數名():
      """ 函數說明文件 """
  ```

- 函數嵌套調用：一個函數內部嵌套調用另外一個函數
