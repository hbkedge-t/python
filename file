# 課程：檔案操作

# 目標

- 檔案操作的作用
- 檔案的基本操作
  - 打開
  - 讀寫
  - 關閉
- 檔案備份
- 檔案和檔案夾的操作



# 一. 檔案操作的作用

思考：什麼是檔案？


思考：檔案操作包含什麼？

答：打開、關閉、讀、寫、複製....

思考：檔案操作的的作用是什麼？

答：讀取內容、寫入內容、備份內容......

> 總結：檔案操作的作用就是==把一些內容(數據)存儲存放起來，可以讓程序下一次執行的時候直接使用，而不必重新製作一份，省時省力==。



# 二. 檔案的基本操作

## 2.1 檔案操作步驟

1. 打開檔案
2. 讀寫等操作
3. 關閉檔案

> 注意：可以只打開和關閉檔案，不進行任何讀寫操作。

### 2.1.1 打開

在python，使用open函數，可以打開一個已經存在的檔案，或者創建一個新檔案，語法如下：

``` python
open(name, mode)
```

name：是要打開的目標檔案名的字符串(可以包含檔案所在的具體路徑)。

mode：設置打開檔案的模式(訪問模式)：只讀、寫入、追加等。



#### 2.1.1.1 打開檔案模式

| 模式 | 描述 |
| :--: | -------------------------------------------- ---------------- |
| r | 以只讀方式打開檔案。檔案的指針將會放在檔案的開頭。這是默認模式。 |
| rb | 以二進制格式打開一個檔案用於只讀。檔案指針將會放在檔案的開頭。這是默認模式。 |
| r+ | 打開一個檔案用於讀寫。檔案指針將會放在檔案的開頭。 |
| rb+ | 以二進制格式打開一個檔案用於讀寫。檔案指針將會放在檔案的開頭。 |
| w | 打開一個檔案只用於寫入。如果該檔案已存在則打開檔案，並從開頭開始編輯，即原有內容會被刪除。如果該檔案不存在，創建新檔案。 |
| wb | 以二進制格式打開一個檔案只用於寫入。如果該檔案已存在則打開檔案，並從開頭開始編輯，即原有內容會被刪除。如果該檔案不存在，創建新檔案。 |
| w+ | 打開一個檔案用於讀寫。如果該檔案已存在則打開檔案，並從開頭開始編輯，即原有內容會被刪除。如果該檔案不存在，創建新檔案。 |
| wb+ | 以二進制格式打開一個檔案用於讀寫。如果該檔案已存在則打開檔案，並從開頭開始編輯，即原有內容會被刪除。如果該檔案不存在，創建新檔案。 |
| a | 打開一個檔案用於追加。如果該檔案已存在，檔案指針將會放在檔案的結尾。也就是說，新的內容將會被寫入到已有內容之後。如果該檔案不存在，創建新檔案進行寫入。 |
| ab | 以二進制格式打開一個檔案用於追加。如果該檔案已存在，檔案指針將會放在檔案的結尾。也就是說，新的內容將會被寫入到已有內容之後。如果該檔案不存在，創建新檔案進行寫入。 |
| a+ | 打開一個檔案用於讀寫。如果該檔案已存在，檔案指針將會放在檔案的結尾。檔案打開時會是追加模式。如果該檔案不存在，創建新檔案用於讀寫。 |
| ab+ | 以二進制格式打開一個檔案用於追加。如果該檔案已存在，檔案指針將會放在檔案的結尾。如果該檔案不存在，創建新檔案用於讀寫。 |



#### 2.1.1.2 快速體驗

``` python
f = open('test.txt', 'w')
```

> 注意：此時的`f`是`open`函數的檔案對象。

### 2.1.2 檔案對象方法

##### 2.1.2.1 寫

- 語法

``` python
對像對象.write('內容')
```

- 體驗

``` python
# 1. 打開檔案
f = open('test.txt', 'w')

# 2.檔案寫入
f.write('嗨 hello world')

# 3. 關閉檔案
f.close()
```

> 注意：
>
> 1. `w `和`a`模式：如果檔案不存在則創建該檔案；如果檔案存在，`w`模式先清空再寫入，`a`模式直接末尾追加。
> 2. `r`模式：如果檔案不存在則報錯。



##### 2.1.2.2 讀

- read()

``` python
檔案對象.read(num)
```

> num表示要從檔案中讀取的數據的長度（單位是字節），如果沒有傳入num，那麼就表示讀取檔案中所有的數據。



- readlines()

readlines可以按照行的方式把整個檔案中的內容進行一次性讀取，並且返回的是一個列表，其中每一行的數據為一個元素。

``` python
f = open('test.txt')
content = f.readlines()

# ['hello world\n', 'abcdefg\n', 'aaa\n', 'bbb\n', 'ccc']
print(content)

# 關閉檔案
f.close()
```



- readline()

readline()一次讀取一行內容。

``` python
f = open('test.txt')

content = f.readline()
print(f'第一行：{content}')

content = f.readline()
print(f'第二行：{content}')

# 關閉檔案
f.close()
```




##### 2.1.2.3 seek()

作用：用來移動檔案指針。

語法如下：

``` python
檔案對象.seek(偏移量, 起始位置)
```

> 起始位置：
>
> - 0：檔案開頭
> - 1：當前位置
> - 2：檔案結尾



### 2.1.3 關閉

```open
檔案對象.close()
```




# 三. 檔案和檔案夾的操作

在Python中檔案和檔案夾的操作要藉助os模塊裡面的相關功能，具體步驟如下：

1. 導入os模塊

``` python
import os
```

2. 使用`os`模塊相關功能

``` python
os.函數名()
```

## 3.1 檔案重命名

``` python
os.rename(目標檔案名, 新檔案名)
```



## 3.2 刪除檔案

``` python
os.remove(目標檔案名)
```



## 3.3 創建檔案夾

``` python
os.mkdir(檔案夾名字)
```



## 3.4 刪除檔案夾

``` python
os.rmdir(檔案夾名字)
```



## 3.5 獲取當前目錄

``` python
os.getcwd()
```



## 3.6 改變默認目錄

``` python
os.chdir(目錄)
```



## 3.7 獲取目錄列表

``` python
os.listdir(目錄)
```






# 總結

- 檔案操作步驟

  - 打開
``` python
  檔案對象 = open(目標檔案, 訪問模式)
  ```

  - 操作

    - 讀

    ``` python
    檔案對象.read()
    檔案對象.readlines()
    檔案對象.readline()
    ```

    - 寫

    ``` python
    檔案對象.write()
    ```

    - seek() 檔案指針從哪開始讀....

  - 關閉

  ``` python
  檔案對象.close()
  ```


- 主訪問模式
  - w：寫，檔案不存在則新建該檔案
  - r：讀，檔案不存在則報錯
  - a：追加

- 檔案和檔案夾操作
  - 重命名：os.rename()
  - 獲取當前目錄：os.getcwd()
  - 獲取目錄列表：os.listdir()
