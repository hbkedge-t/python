# 課程：函數-2

# 目標

- 變量作用域
- 多函數程序執行流程
- 函數的返回值
- 函數的參數
- 拆包和交換兩個變量的值
- 引用
- 可變和不可變類型

# 一. 變量作用域

變量作用域指的是變量生效的範圍，主要分為兩類：==局部變量==和==全局變量==。

- 局部變量

所謂局部變量是定義在函數體內部的變量，即只在函數體內部生效。

``` python
def testA():
    a = 100

    print(a)


testA() # 100
print(a) # 報錯：name 'a' is not defined
```

> 變量a是定義在`testA`函數內部的變量，在函數外部訪問則立即報錯。

局部變量的作用：在函數體內部，臨時保存數據，即當函數調用完成後，則銷毀局部變量。

- 全局變量

所謂全局變量，指的是在函數體內、外都能生效的變量。

思考：如果有一個數據，在函數A和函數B中都要使用，該怎麼辦？

答：將這個數據存儲在一個全局變量裡面。

``` python
# 定義全局變量a
a = 100


def testA():
    print(a) # 訪問全局變量a，並打印變量a存儲的數據


def testB():
    print(a) # 訪問全局變量a，並打印變量a存儲的數據


testA() # 100
testB() # 100
```

思考：`testB`函數需求修改變量a的值為200，如何修改程序？

``` python
a = 100


def testA():
    print(a)


def testB():
    a = 200
    print(a)


testA() # 100
testB() # 200
print(f'全局變量a = {a}') # 全局變量a = 100
```

思考：在`testB`函數內部的`a = 200`中的變量a是在修改全局變量`a`嗎？

答：不是。觀察上述代碼發現，15行得到a的數據是100，仍然是定義全局變量a時候的值，而沒有返回

`testB`函數內部的200。綜上：`testB`函數內部的`a = 200`是定義了一個局部變量。

思考：如何在函數體內部修改全局變量？

``` python
a = 100


def testA():
    print(a)


def testB():
    # global 關鍵字聲明a是全局變量
    global a
    a = 200
    print(a)


testA() # 100
testB() # 200
print(f'全局變量a = {a}') # 全局變量a = 200
```

# 二. 多函數程序執行流程

一般在實際開發過程中，一個程序往往由多個函數組成，並且多個函數共享某些數據，如下所示：

- 共用全局變量

``` python
# 1. 定義全局變量
glo_num = 0


def test1():
    global glo_num
    # 修改全局變量
    glo_num = 100


def test2():
    # 調用test1函數中修改後的全局變量
    print(glo_num)
    

# 2. 調用test1函數，執行函數內部代碼：聲明和修改全局變量
test1()
# 3. 調用test2函數，執行函數內部代碼：打印
test2() # 100
```

- 返回值作為參數傳遞

``` python
def test1():
    return 50


def test2(num):
    print(num)


# 1. 保存函數test1的返回值
result = test1()


# 2.將函數返回值所在變量作為參數傳遞到test2函數
test2(result) # 50
```

# 三. 函數的返回值

思考：如果一個函數如些兩個return，程序如何執行？

``` python
def return_num():
    return 1
    return 2


result = return_num()
print(result) # 1
```

答：只執行了第一個return，原因是因為return可以退出當前函數，導致return下方的代碼不執行。

思考：如果一個函數要有多個返回值，該如何書寫代碼？

``` python
def return_num():
    return 1, 2


result = return_num()
print(result) # (1, 2)
```

> 注意：
>
> 1. `return a, b`寫法，返回多個數據的時候，默認是元組類型。
> 2. return後面可以連接列表、元組或字典，以返回多個值。



# 四. 函數的參數

## 4.1 位置參數

位置參數：調用函數時根據函數定義的參數位置來傳遞參數。

``` python
def user_info(name, age, gender):
    print(f'您的名字是{name}, 年齡是{age}, 性別是{gender}')


user_info('TOM', 20, '男')
```

> 注意：傳遞和定義參數的順序及個數必須一致。



## 4.2 關鍵字參數

函數調用，通過“鍵=值”形式加以指定。可以讓函數更加清晰、容易使用，同時也清除了參數的順序需求。

``` python
def user_info(name, age, gender):
    print(f'您的名字是{name}, 年齡是{age}, 性別是{gender}')


user_info('Rose', age=20, gender='女')
user_info('小明', gender='男', age=16)
```

注意：**函數調用時，如果有位置參數時，位置參數必須在關鍵字參數的前面，但關鍵字參數之間不存在先後順序。 **



## 4.3 預設參數

預設參數也叫默認參數，用於定義函數，為參數提供默認值，調用函數時可不傳該默認參數的值（注意：所有位置參數必須出現在默認參數前，包括函數定義和調用）。

``` python
def user_info(name, age, gender='男'):
    print(f'您的名字是{name}, 年齡是{age}, 性別是{gender}')


user_info('TOM', 20)
user_info('Rose', 18, '女')
```

> 注意：函數調用時，如果為預設參數傳值則修改默認參數值；否則使用這個默認值。

## 4.4 不定長參數

不定長參數也叫可變參數。用於不確定調用的時候會傳遞多少個參數(不傳參也可以)的場景。此時，可用包裹(packing)位置參數，或者包裹關鍵字參數，來進行參數傳遞，會顯得非常方便。

- 包裹位置傳遞

``` python
def user_info(*args):
    print(args)


# ('TOM',)
user_info('TOM')
# ('TOM', 18)
user_info('TOM', 18)
```

> 注意：傳進的所有參數都會被args變量收集，它會根據傳進參數的位置合併為一個元組(tuple)，args是元組類型，這就是包裹位置傳遞。

- 包裹關鍵字傳遞

``` python
def user_info(**kwargs):
    print(kwargs)


# {'name': 'TOM', 'age': 18, 'id': 110}
user_info(name='TOM', age=18, id=110)
```

> 綜上：無論是包裹位置傳遞還是包裹關鍵字傳遞，都是一個組包的過程。



# 五. 拆包和交換變量值

## 5.1 拆包

- 拆包：元組

``` python
def return_num():
    return 100, 200


num1, num2 = return_num()
print(num1) # 100
print(num2) # 200
```

- 拆包：字典

``` python
dict1 = {'name': 'TOM', 'age': 18}
a, b = dict1

# 對字典進行拆包，取出來的是字典的key
print(a) # name
print(b) # age

print(dict1[a]) # TOM
print(dict1[b]) # 18
```



## 5.2 交換變量值

需求：有變量`a = 10`和`b = 20`，交換兩個變量的值。

- 方法一

借助第三變量存儲數據。

``` python
# 1. 定義中間變量
c = 0

# 2. 將a的數據存儲到c
c = a

# 3. 將b的數據20賦值到a，此時a = 20
a = b

# 4. 將之前c的數據10賦值到b，此時b = 10
b = c

print(a) # 20
print(b) # 10
```

- 方法二

``` python
a, b = 1, 2
a, b = b, a
print(a) # 2
print(b) # 1
```

# 六. 引用

## 6.1 了解引用

在python中，值是靠引用來傳遞來的。

**我們可以用`id()`來判斷兩個變量是否為同一個值的引用。 ** 我們可以將id值理解為那塊內存的地址標識。

``` python
# 1. int類型
a = 1
b = a

print(b) # 1

print(id(a)) # 140708464157520
print(id(b)) # 140708464157520

a = 2
print(b) # 1,說明int類型為不可變類型

print(id(a)) # 140708464157552，此時得到是的數據2的內存地址
print(id(b)) # 140708464157520


# 2. 列表
aa = [10, 20]
bb = aa

print(id(aa)) # 2325297783432
print(id(bb)) # 2325297783432


aa.append(30)
print(bb) # [10, 20, 30], 列表為可變類型

print(id(aa)) # 2325297783432
print(id(bb)) # 2325297783432
```

## 6.2 引用當做實參

代碼如下：

``` python
def test1(a):
    print(a)
    print(id(a))

    a += a

    print(a)
    print(id(a))


# int：計算前後id值不同
b = 100
test1(b)

# 列表：計算前後id值相同
c = [11, 22]
test1(c)
```



# 七. 可變和不可變類型

所謂可變類型與不可變類型是指：數據能夠直接進行修改，如果能直接修改那麼就是可變，否則是不可變.

- 可變類型
  - 列表
  - 字典
  - 集合
- 不可變類型
  - 整型
  - 浮點型
  - 字符串
  - 元組



# 八. 總結
變量作用域
  - 全局：函數體內外都能生效
  - 局部：當前函數體內部生效
- 函數多返回值寫法

``` python
return 表達式1, 表達式2...
```

- 函數的參數
  - 位置參數
    - 形參和實參的個數和書寫順序必須一致
  - 關鍵字參數
    - 寫法： `key=value`
    - 特點：形參和實參的書寫順序可以不一致；關鍵字參數必須書寫在位置參數的後面
  - 預設參數
    - 預設參數就是默認參數
    - 寫法：`key=vlaue`
  - 不定長位置參數
    - 收集所有位置參數，返回一個元組
  - 不定長關鍵字參數
    - 收集所有關鍵字參數，返回一個字典
- 引用：Python中，數據的傳遞都是通過引用
